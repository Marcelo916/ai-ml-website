"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _Validator = _interopRequireDefault(require("../utils/Validator.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var QuoteManager = /*#__PURE__*/function () {
  function QuoteManager(quotes) {
    _classCallCheck(this, QuoteManager);
    this.quotes = Array.isArray(quotes) ? quotes : [];
  }

  /**
   * Get a random quote
   * @returns {{quote: *, blockQuote: string, author: *}|null}
   */
  return _createClass(QuoteManager, [{
    key: "getRandomQuote",
    value: function getRandomQuote() {
      if (this.quotes.length === 0) {
        return null;
      }
      var randomIndex = Math.floor(Math.random() * this.quotes.length);
      var selectedQuote = this.quotes[randomIndex];
      return {
        quote: selectedQuote.quoteText,
        author: selectedQuote.quoteAuthor,
        blockQuote: "<blockquote>&ldquo;".concat(selectedQuote.quoteText, "&rdquo; &mdash; <footer>").concat(selectedQuote.quoteAuthor, "</footer></blockquote>")
      };
    }

    /**
     * Get a quote by a specific author (case-insensitive)
     * @param {string} inputAuthor - The author's name to filter quotes by
     * @returns {{quote: *, blockQuote: string, author: *}|null}
     */
  }, {
    key: "getRandomQuoteByAuthor",
    value: function getRandomQuoteByAuthor(inputAuthor) {
      _Validator["default"].validateAuthor(inputAuthor);
      var normalizedAuthor = inputAuthor.trim().toLowerCase();
      var filteredQuotes = this.quotes.filter(function (quote) {
        return quote.quoteAuthor && quote.quoteAuthor.trim().toLowerCase() === normalizedAuthor;
      });
      if (filteredQuotes.length === 0) {
        return null;
      }
      var randomIndex = Math.floor(Math.random() * filteredQuotes.length);
      var _filteredQuotes$rando = filteredQuotes[randomIndex],
        quote = _filteredQuotes$rando.quoteText,
        author = _filteredQuotes$rando.quoteAuthor;
      return {
        quote: quote,
        author: author,
        blockQuote: "<blockquote>&ldquo;".concat(quote, "&rdquo; &mdash; <footer>").concat(author, "</footer></blockquote>")
      };
    }

    /**
     * Get a random quote and its author
     * @returns {{quote: *, author: *}|null}
     */
  }, {
    key: "getRandomQuoteAndAuthor",
    value: function getRandomQuoteAndAuthor() {
      var randomQuote = this.getRandomQuote();
      return randomQuote ? {
        quote: randomQuote.quote,
        author: randomQuote.author
      } : null;
    }
  }]);
}();
var _default = exports["default"] = QuoteManager;